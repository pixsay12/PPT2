# -*- coding: utf-8 -*-
"""Generate PPT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQtfoZmdFgApJmdmJDBe--S7vxJ4rQqT
"""

import os
from google.colab import drive #berguna untuk menyambungkan dengan google drive

drive.mount('/content/drive')

# membuat folder yang dibutuhkan untuk menyimpan excel
try:
  os.makedirs('drive/MyDrive/generate_ppt/data_excel')
except:
  print('folder already exists')

# membuat folder yang dibutuhkan untuk menyimpan ppt
try:
  os.makedirs('drive/MyDrive/generate_ppt/data_ppt')
except:
  print('folder already exists')

# membuat folder yang dibutuhkan untuk menyimpan image
try:
  os.makedirs('drive/MyDrive/generate_ppt/data_image')
except:
  print('folder already exists')

# install package yang dibutuhkan
!pip install dataframe_image 
!pip install numerize
!pip install python-pptx

# Import Library
import pandas as pd
import os,re
import numpy as np
import json
import dataframe_image as dfi

from numerize import numerize 
from tqdm import tqdm
from datetime import datetime, timedelta

from pptx import Presentation
from pptx.util import Inches, Cm, Pt
from pptx.enum.shapes import MSO_SHAPE
from pptx.enum.text import PP_ALIGN, MSO_AUTO_SIZE
from pptx.dml.color import ColorFormat, RGBColor
from pptx.enum.dml import MSO_COLOR_TYPE, MSO_THEME_COLOR
from pptx.enum.text import MSO_ANCHOR
from pptx.chart.data import CategoryChartData, ChartData
from pptx.enum.chart import XL_CHART_TYPE
from pptx.enum.chart import XL_LEGEND_POSITION
from pptx.enum.chart import XL_LABEL_POSITION
from pptx.enum.chart import XL_DATA_LABEL_POSITION
from pptx.chart.data import XyChartData, XySeriesData

def job(tanggal_data):
    # ================================================================================================================
    
    sekarang = datetime.now().strftime('%d-%m-%Y')


    # ================================================================================================================
    path_excel = 'daily_data/'
    path_image = '/setneg-dir/KAZEE/SNA/XYZ/Report Twitter Harian/'
    path_ppt = '/setneg-dir/KAZEE/analisis_muhyi/script report harian/New PPT/'
    # User
    username = 'Erick Thohir'
    # Lorem Ipsum for Debug
    lorem_ipsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce consequat vel purus eget pharetra. Fusce nec elit eget nibh ultricies tempus a eget nulla. Integer mattis sodales nisi, sed commodo neque rhoncus nec."


    # ================================================================================================================

    news_topic = pd.read_excel(path_excel+'{}_muhyi_topic.xlsx'.format(tanggal_data), sheet_name = 'topic')
    news_topic = news_topic.rename(columns = {'neg':'total_neg','pos':'total_pos','net':'total_net'})

    total_postingan_news = news_topic['total_neg'] + news_topic['total_net'] + news_topic['total_pos']
    total_postingan_news = total_postingan_news.sum()
    print("Total Postingan : " + str(total_postingan_news))
    
    # News
    news_post = []

    for j, i in enumerate(news_topic.to_dict(orient='records')):
        total_post = i['total_neg'] + i['total_net'] + i['total_pos']
        news_post.append(total_post)

    news = pd.DataFrame(news_post, columns = ['total'])

    list_topics = []
    for j, i in enumerate(news_topic['topic']):
        try:
            list_topics.append(i)
        except:
            list_topics.append('-')

    list_links_pos = []
    for j, i in enumerate(news_topic['positive url']):
        try:
            list_links_pos.append(i.split("|"))
        except:
            list_links_pos.append('-')

    list_links_neg = []
    for j, i in enumerate(news_topic['negative url']):
        try:
            list_links_neg.append(i.split("|"))
        except:
            list_links_neg.append('-')


    # ================================================================================================================
    excel_path = os.path.join(path_excel, 'final_summary_isu_sentiment_{}.xlsx'.format(tanggal_data))
    df = pd.read_excel(excel_path)
    social_media = df
    social_media = social_media.rename(columns = {'neg_percent':'negatif (%)','pos_percent':'positif (%)','net_percent':'netral (%)'})
    total_postingan_social_media = social_media['total_neg'] + social_media['total_net'] + social_media['total_pos']
    total_postingan_social_media = total_postingan_social_media.sum()

    social_media_post = []

    for j, i in enumerate(social_media.to_dict(orient='records')):
        total_post = i['total_neg'] + i['total_pos'] + i['total_net']
        social_media_post.append(total_post)

    df_social_media_post = pd.DataFrame(social_media_post, columns = ['total'])

    social_media_isu = social_media['isu']
    # ================================================================================================================
    box_color = RGBColor(220,220,220)
    scale_x = 33.867/40.64
    scale_y = 19.05/22.86

    def simple_text(left, top, lebar, panjang, isi_text, bolds, italics, font_size):
        txBox = slide.shapes.add_textbox(left, top, lebar, panjang)
        shape_text = txBox.text_frame

        p = shape_text.paragraphs[0]
        p.text = isi_text
        p.font.bold = bolds
        p.font.italic = italics
        p.font.size = font_size
        shape_text.word_wrap = True

    def make_text(left, top, lebar, panjang,  judul, isi_text):
        txBox = slide.shapes.add_textbox(left, top, lebar, panjang)
        shape_text = txBox.text_frame

        p = shape_text.paragraphs[0]
        p.text = judul
        p.font.bold = True
        p.font.size = Pt(14)

        p = shape_text.add_paragraph()
        p.text = isi_text
        shape_text.word_wrap = True
        tf.word_wrap = True
        p.font.size = Pt(12)

    def make_box(left, top, width, height, box_color):
        shape_split = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
        shape_split.shadow.inherit = False

        line = shape_split.line
        line.width = Pt(0)
        line.fill.background()

        fill = shape_split.fill
        fill.solid()
        fill.fore_color.rgb = box_color

    def make_pie_news(left, top, width, height):
        chart_data = ChartData()
        chart_data.categories = list(news_topic['topic'])
        chart_data.add_series('topic',list(news_topic['freq']))

        x, y, cx, cy = Inches(left), Inches(top), Inches(width), Inches(height)
        chart = slide.shapes.add_chart(
            XL_CHART_TYPE.DOUGHNUT, x, y, cx, cy, chart_data
        ).chart

        chart.has_title = False
        chart.has_legend = True
        chart.legend.position = XL_LEGEND_POSITION.RIGHT
        chart.legend.include_in_layout = False
        chart.legend.font.size = Pt(10)

        chart.plots[0].has_data_labels = True
        data_labels = chart.plots[0].data_labels
        data_labels.show_percentage = True
        data_labels.show_value = False
        data_labels.font.size = Pt(12)

    def make_bt_news(df_brand, variable, chart_type, left, top, width, height, legend):
        chart_data = ChartData()
        labels = list(df_brand[variable])
        chart_data.categories = labels

        for i in ['negatif (%)', 'netral (%)', 'positif (%)']:
            chart_data.add_series(i, round(df_brand[i]))

        x, y, cx, cy = Inches(left), Inches(top), Inches(width), Inches(height)
        graphic_frame = slide.shapes.add_chart(
            chart_type, x, y, cx, cy, chart_data
        )

        chart = graphic_frame.chart

        chart.value_axis.has_major_gridlines = False
        chart.value_axis.visible = False

        chart.category_axis.tick_labels.font.size = Pt(10)

        fill = chart.plots[0].series[0].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("ff0000")

        fill = chart.plots[0].series[1].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("D3D3D3")

        fill = chart.plots[0].series[2].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("00FF00")

        if legend == True:
            chart.has_legend = legend
            chart.legend.include_in_layout = False
            chart.legend.position = XL_LEGEND_POSITION.RIGHT
            chart.legend.include_in_layout = False
            chart.legend.font.size = Pt(10)

        chart.plots[0].has_data_labels = True
        data_labels = chart.plots[0].data_labels
        data_labels.font.size = Pt(8)

    def make_pie_social_media(left, top, width, height):
        chart_data = ChartData()
        chart_data.categories = social_media_isu
        chart_data.add_series('isu',list(df_social_media_post['total']))

        x, y, cx, cy = Inches(left), Inches(top), Inches(width), Inches(height)
        chart = slide.shapes.add_chart(
            XL_CHART_TYPE.DOUGHNUT, x, y, cx, cy, chart_data
        ).chart

        chart.has_title = False
        chart.has_legend = True
        chart.legend.position = XL_LEGEND_POSITION.RIGHT
        chart.legend.include_in_layout = False
        chart.legend.font.size = Pt(10)

        chart.plots[0].has_data_labels = True
        data_labels = chart.plots[0].data_labels
        data_labels.show_percentage = True
        data_labels.show_value = False
        data_labels.font.size = Pt(12)

    def make_bt_social_media(df_brand, variable, chart_type, left, top, width, height, legend):
        chart_data = ChartData()
        labels = list(df_brand[variable])
        chart_data.categories = labels
    #     for i in ['neg_percent', 'net_percent', 'pos_percent']:
        for i in ['negatif (%)', 'netral (%)', 'positif (%)']:
            chart_data.add_series(i, df_brand[i])

        x, y, cx, cy = Inches(left), Inches(top), Inches(width), Inches(height)
        graphic_frame = slide.shapes.add_chart(
            chart_type, x, y, cx, cy, chart_data
        )

        chart = graphic_frame.chart

        chart.value_axis.has_major_gridlines = False
        chart.value_axis.visible = False

        chart.category_axis.tick_labels.font.size = Pt(10)

        fill = chart.plots[0].series[0].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("ff0000")

        fill = chart.plots[0].series[1].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("D3D3D3")

        fill = chart.plots[0].series[2].format.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor.from_string("00FF00")

        if legend == True:
            chart.has_legend = legend
            chart.legend.include_in_layout = False
            chart.legend.position = XL_LEGEND_POSITION.RIGHT
            chart.legend.include_in_layout = False
            chart.legend.font.size = Pt(10)

        chart.plots[0].has_data_labels = True
        data_labels = chart.plots[0].data_labels
        data_labels.font.size = Pt(8)

    def make_topic2(labels, data, color_code, left, top, width, height):
        df = pd.DataFrame({
            'labels':labels,
            'data':data
        })
        df = df.sort_values('data', ascending = False)
        labels = df['labels']
        data = df['data']

        chart_data = ChartData()
        chart_data.categories = labels

        chart_data.add_series('cluster', data)

        x, y, cx, cy = Inches(left), Inches(top), Inches(width), Inches(height)
        graphic_frame = slide.shapes.add_chart(
            XL_CHART_TYPE.COLUMN_CLUSTERED, x, y, cx, cy, chart_data
        )

        chart = graphic_frame.chart

        chart.chart_style = 11

        chart.has_title = False
        chart.value_axis.has_major_gridlines = False
        chart.category_axis.tick_labels.font.size = Pt(10)

        chart.plots[0].has_data_labels = True
        chart.value_axis.major_unit = None
        chart.value_axis.visible = False

        color_list = [color_code]
        for idx, point in enumerate(chart.series[0].points):
            col_idx = idx % len(color_list)
            point.format.fill.solid()
            point.format.fill.fore_color.rgb = RGBColor.from_string(color_list[col_idx])

    def make_picture(path, left, top, width, height):
        img_path = path
        left = Inches(left)
        top = Inches(top)
        width = Inches(width)
        height = Inches(height)
        pic = slide.shapes.add_picture(img_path, left, top, height = height)

    def make_outlines(left, top, width, height):
        shape_split = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
        shape_split.shadow.inherit = False

        line = shape_split.line
        line.width = Pt(1)
        line.fill.background()
        line.color.rgb = RGBColor(0, 0, 0)

        fill = shape_split.fill
        fill.background()


    # ================================================================================================================
    prs = Presentation()
    prs.slide_height = Cm(19.05)
    prs.slide_width = Cm(33.867)
    blank_slide_layout = prs.slide_layouts[6]

    # ==================================================================================
    # Slide 1
    # ==================================================================================
    slide = prs.slides.add_slide(blank_slide_layout)

    # Splitter
    make_box(Inches(0.36), Inches(1.05), Inches(12.61), Inches(0.01), box_color)

    # Elements
    # Picture of Brand
    img_profile = os.path.join(path_image, '{}.png'.format(username))
    pic = slide.shapes.add_picture(img_profile, Inches(0.42), Inches(0.1), Inches(0.85), Inches(0.85))

    # Title
    simple_text(Inches(1.47), Inches(0.11), Inches(5.5), Inches(0.5), "Executive Summary", True, False, Pt(25))

    # Nama Brand
    simple_text(Inches(1.48), Inches(0.51), Inches(2.32), Inches(1), username, False, False, Pt(15))

    # Tanggal header        
    this_text = 'Berikut laporan percakapan dan pemberitaan mengenai Bapak ET pada periode {}'.format(sekarang)
    simple_text(Inches(0.42), Inches(1.12), Inches(7.51), Inches(0.3), this_text, False, False, Pt(12))

    # Judul Online News
    txBox = slide.shapes.add_textbox(Inches(0.42), Inches(1.52), Inches(9), Inches(2))
    tf = txBox.text_frame
    shape_text = txBox.text_frame
    p = shape_text.paragraphs[0]
    p.text = "Top Issues Online News"
    p.font.size = Pt(14)
    p.font.bold = True

    for j, i in enumerate(news_topic.to_dict(orient='records')):
        jumlah_post = ""
        per_com = ""
        pos_com = ""
        neg_com = ""
        net_com = ""

        percent_posting = ((i['total_neg'] + i['total_net'] + i['total_pos']) / total_postingan_news) * 100

        if (percent_posting).is_integer():
            per_com = "{}%".format(round(percent_posting))
        else:
            per_com = "{}%".format(round(percent_posting, 2))

        total_post = i['total_neg'] + i['total_pos'] + i['total_net']
        try:
            percent_pos = (i['total_pos'] / total_post) * 100
        except:
            percent_pos = 0.0

        try:
            percent_neg = (i['total_neg'] / total_post) * 100
        except:
            percent_neg = 0.0

        try:    
            percent_net = (i['total_net'] / total_post) * 100
        except:
            percent_net = 0.0
        news_topic.at[j, "negatif (%)"] = round(percent_neg, 1)
        news_topic.at[j, "netral (%)"] = round(percent_net, 1)
        news_topic.at[j, "positif (%)"] = round(percent_pos,1 )
        #print(round(percent_pos,1), round(percent_neg,1), round(percent_net,1))

        if (percent_net).is_integer():
            pos_com = "{}% Positif".format(round(percent_pos))
        else:
            pos_com = "{}% Positif".format(round(percent_pos, 1))

        if (percent_net).is_integer():
            neg_com = "{}% Negatif".format(round(percent_neg))
        else:
            neg_com = "{}% Negatif".format(round(percent_neg, 1))

        if (percent_net).is_integer():
            net_com = "{}% Netral".format(round(percent_net))
        else:
            net_com = "{}% Netral".format(round(percent_net, 1))

        kalimat_news = i['topic'] + " sebanyak " + per_com + " ({}, {}, {})".format(pos_com, net_com, neg_com)
        p = shape_text.add_paragraph()
        p.text = " {}. {}".format(j+1, kalimat_news)
        p.font.italic = True
        shape_text.word_wrap = True

        tf.word_wrap = True
        p.font.size = Pt(12)

    txBox = slide.shapes.add_textbox(Inches(0.42), Inches(3), Inches(9), Inches(2))
    shape_text = txBox.text_frame
    p = shape_text.paragraphs[0]
    p.text = "Top Issues Social Media"
    p.font.size = Pt(14)
    p.font.bold = True        

    for j, i in enumerate(social_media.to_dict(orient='records')):
        jumlah_post = ""
        per_com = ""
        pos_com = ""
        neg_com = ""
        net_com = ""

        percent_posting = ((i['total_neg'] + i['total_net'] + i['total_pos']) / total_postingan_social_media) * 100
        if (percent_posting).is_integer():
            per_com = "{}%".format(round(percent_posting))
        else:
            per_com = "{}%".format(round(percent_posting, 2))


        total_post = i['total_neg'] + i['total_pos'] + i['total_net']
        try:
            percent_pos = (i['total_pos'] / total_post) * 100
        except:
            percent_pos = 0.0

        try:
            percent_neg = (i['total_neg'] / total_post) * 100
        except:
            percent_neg = 0.0

        try:    
            percent_net = (i['total_net'] / total_post) * 100
        except:
            percent_net = 0.0
        social_media.at[j, "negatif (%)"] = round(percent_neg, 1)
        social_media.at[j, "netral (%)"] = round(percent_net, 1)
        social_media.at[j, "positif (%)"] = round(percent_pos,1 )
    #     print(round(percent_pos,1), round(percent_neg,1), round(percent_net,1))

        if (percent_net).is_integer():
            pos_com = "{}% Positif".format(round(percent_pos))
        else:
            pos_com = "{}% Positif".format(round(percent_pos, 1))

        if (percent_net).is_integer():
            neg_com = "{}% Negatif".format(round(percent_neg))
        else:
            neg_com = "{}% Negatif".format(round(percent_neg, 1))

        if (percent_net).is_integer():
            net_com = "{}% Netral".format(round(percent_net))
        else:
            net_com = "{}% Netral".format(round(percent_net, 1))

        kalimat_social_media = i['isu'] + " sebanyak " + per_com + " ({}, {}, {})".format(pos_com, net_com, neg_com)
        p = shape_text.add_paragraph()
        p.text = " {}. {}".format(j+1, kalimat_social_media)
        p.font.italic = True
        shape_text.word_wrap = True

        tf.word_wrap = True
        p.font.size = Pt(12)

    # Judul Rekomendasi
    simple_text(Inches(0.42), Inches(5.16), Inches(7.51), Inches(0.3), "Rekomendasi", True, False, Pt(14))
    simple_text(Inches(0.42), Inches(5.4), Inches(9), Inches(1.25), lorem_ipsum, False,  False, Pt(12))

    # ==================================================================================
    # Slide 2
    # ==================================================================================
    slide = prs.slides.add_slide(blank_slide_layout)

    # Splitter
    make_box(Inches(0.36), Inches(1.05), Inches(12.61), Inches(0.01), box_color)

    # Picture of Brand
    img_profile = os.path.join(path_image, '{}.png'.format(username))
    pic = slide.shapes.add_picture(img_profile, Inches(0.42), Inches(0.1), Inches(0.85), Inches(0.85))

    # Title
    simple_text(Inches(1.47), Inches(0.11), Inches(5.5), Inches(0.5), "Top Issues Online News", True, False, Pt(25))

    # Nama Brand
    simple_text(Inches(1.48), Inches(0.51), Inches(2.32), Inches(1), username, False, False, Pt(15))

    # Picture of Diagram
    make_pie_news(0, 1.1, 4.2, 2.9)
    make_bt_news(news_topic, 'topic', XL_CHART_TYPE.COLUMN_STACKED, 0.2, 3.7, 4, 2.8, True)

    # Splitter
    make_box(Inches(4.22), Inches(1.26), Inches(0.01), Inches(6.09), box_color)
    simple_text(Inches(4.33), Inches(1.26), Inches(1.2), Inches(1), "Top Issues", True, False, Pt(15))

    # INI GAMBAR TOPIC
    lefties = 4.4
    lebyar = 1.5
    tinggi_item = 0.95
    top_incr = 2.14
    
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(220,230,242))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Topic"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    for i in list_topics:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        for links in i:
            if links == "-":
                r = p.add_run()
                r.text = ' -'
            else:
                r = p.add_run()
                r.text = links
                r.font.size = Pt(12)
                shape_text.word_wrap = True
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar
    
    # INI GAMBAR LINK POSITIP
    lebyar = lebyar + 2
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(0,176,80))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Positive"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    tinggi_item = 0.95
    top_incr = 2.14
    for i in list_links_pos:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]

        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    # INI GAMBAR LINK NEGATIP
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(255,0,0))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Negative"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    tinggi_item = 0.95
    top_incr = 2.14
    for i in list_links_neg:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]

        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar
    
    # ==================================================================================
    # Slide 3
    # ==================================================================================
    slide = prs.slides.add_slide(blank_slide_layout)

    make_box(Inches(0.36), Inches(1.05), Inches(12.61), Inches(0.01), box_color)
    img_profile = os.path.join(path_image, '{}.png'.format(username))
    pic = slide.shapes.add_picture(img_profile, Inches(0.42), Inches(0.1), Inches(0.85), Inches(0.85))

    # Title
    simple_text(Inches(1.47), Inches(0.11), Inches(5.5), Inches(0.5), "Sentiment per Channel", True, False, Pt(25))

    # Nama Brand
    simple_text(Inches(1.48), Inches(0.51), Inches(2.32), Inches(1), username, False, False, Pt(15))

    # EDIT TABLE SIZE AND POSITION HERE
    lefties = 0.5
    lebyar = 4.1
    tinggi_item = 0.8
    top_incr = 1.9
    
    # INI GAMBAR TOPIC
    make_box(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5), RGBColor(220,230,242))
    make_outlines(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Topic"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    for i in list_topics:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        for links in i:
            if links == "-":
                r = p.add_run()
                r.text = ' -'
            else:
                r = p.add_run()
                r.text = links
                r.font.size = Pt(12)
                shape_text.word_wrap = True
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    # INI GAMBAR LINK POSITIP
    make_box(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5), RGBColor(0,176,80))
    make_outlines(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Positive"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    top_incr = 1.9
    tinggi_item = 0.8
    for i in list_links_pos:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        for links in i:
            newlinks = ''
            if links == "-":
                r = p.add_run()
                r.text = ' -'
            else:
                x = re.findall(r'(?:https\:\/\/).*(?=\.com).com', links)
                try:
                    newlinks = x[0].replace("https://", "").replace("www.", "").replace(".com", "").replace(".", "-")
                except:
                    pass
                r = p.add_run()
                r.text = newlinks + ', '
                r.font.size = Pt(12)
                hlink = r.hyperlink
                hlink.address = links     
                shape_text.word_wrap = True
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    # INI GAMBAR LINK NEGATIP
    make_box(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5), RGBColor(255,0,0))
    make_outlines(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.4), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Negative"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    top_incr = 1.9
    tinggi_item = 0.8
    for i in list_links_neg:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        for links in i:
            newlinks = ''
            if links == "-":
                r = p.add_run()
                r.text = ' -'
            else:
                x = re.findall(r'(?:https\:\/\/).*(?=\.com).com', links)
                try:
                    newlinks = x[0].replace("https://", "").replace("www.", "").replace(".com", "").replace(".", "-")
                except:
                    pass
                r = p.add_run()
                r.text = newlinks + ', '
                r.font.size = Pt(12)
                hlink = r.hyperlink
                hlink.address = links     
                shape_text.word_wrap = True
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    # ==================================================================================
    # Slide 4
    # ==================================================================================
    slide = prs.slides.add_slide(blank_slide_layout)

    # Splitter
    make_box(Inches(0.36), Inches(1.05), Inches(12.61), Inches(0.01), box_color)

    # Picture of Brand
    img_profile = os.path.join(path_image, '{}.png'.format(username))
    pic = slide.shapes.add_picture(img_profile, Inches(0.42), Inches(0.1), Inches(0.85), Inches(0.85))

    # Title
    simple_text(Inches(1.47), Inches(0.11), Inches(5.5), Inches(0.5), "Top Issues Social Media", True, False, Pt(25))

    # Nama Brand
    simple_text(Inches(1.48), Inches(0.51), Inches(2.32), Inches(1), username, False, False, Pt(15))

    #Diagram
    make_pie_social_media(0, 1.1, 4.2, 2.9)
    make_bt_social_media(social_media, 'isu', XL_CHART_TYPE.COLUMN_STACKED, 0.2, 3.7, 4, 2.8, True)

    # Splitter
    make_box(Inches(4.22), Inches(1.26), Inches(0.01), Inches(6.09), box_color)
    simple_text(Inches(4.33), Inches(1.26), Inches(1.2), Inches(1), "Top Issues", True, False, Pt(15))
    
    # EDIT TABLE SIZE AND POSITION HERE
    lefties = 4.4
    lebyar = 1.5
    tinggi_item = 0.95
    top_incr = 2.14
    
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(220,230,242))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame
    
    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Topic"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True
    
    for i in social_media_isu:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        for links in i:
            if links == "-":
                r = p.add_run()
                r.text = ' -'
            else:
                r = p.add_run()
                r.text = links
                r.font.size = Pt(12)
                shape_text.word_wrap = True
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar
    
    # INI GAMBAR LINK POSITIP
    lebyar = lebyar + 2
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(0,176,80))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Positive"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    tinggi_item = 0.95
    top_incr = 2.14
    for i in social_media_isu:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    # INI GAMBAR LINK NEGATIP
    make_box(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39), RGBColor(255,0,0))
    make_outlines(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.39))

    txBox = slide.shapes.add_textbox(Inches(lefties), Inches(1.75), Inches(lebyar), Inches(0.5))
    shape_text = txBox.text_frame

    p = shape_text.paragraphs[0]
    p.alignment = PP_ALIGN.CENTER
    p.vertical_anchor = MSO_ANCHOR.MIDDLE
    p.text =  "Negative"
    p.font.bold = True
    p.font.size = Pt(15)
    shape_text.word_wrap = True

    tinggi_item = 0.95
    top_incr = 2.14
    for i in social_media_isu:
        make_outlines(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        txBox = slide.shapes.add_textbox(Inches(lefties), Inches(top_incr), Inches(lebyar), Inches(tinggi_item))
        shape_text = txBox.text_frame
        p = shape_text.paragraphs[0]
        top_incr = top_incr + tinggi_item
    lefties = lefties + lebyar

    prs.save(path_ppt+'report_{}.pptx'.format(datetime.now().strftime('%d_%m_%y')))
    print('Task Done')
    
tanggal_data = '2022-10-16'
job(tanggal_data)

